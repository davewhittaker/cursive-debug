(refresh)
(test-session)
(reset)
(refresh)
(test-session)
exit
(test-session)
(. *e printStackTrace)
exit
(test-session)
(refresh)
(test-session)
(reset)
(retest)
(timeout)
(retest)
(timeout)
(. *e printStackTrace)
(retest)
(timeout)
(. *e printStackTrace)
(retest)
(timeout)
(. *e printStackTrace)
(retest)
(timeout)
(. *e printStackTrace)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(epos 1002)
(timeout)
(retest)
(epos 1002)
(timeout)
(retest)
(refresh)
(retest)
(. *e printStackTrace)
(reset)
(retest)
(timeout)
(retest)
(epos 1002)
(retest)
(refresh)
(retest)
(refresh)
(retest)
(. *e printStackTrace)
(init-session)
(epos 1002)
(timeout)
(retest)
(timeout)
(retest)
(refresh)
(retest)
(init)
(retest)
(timeout)
(retest)
(timeout)
(retest)
(timeout)
exit
(retest)
(init)
(retest)
(search "How are you")
(. *e printStackTrace)
(retest)
(search "How are you")
(ask 5)
(. *e printStackTrace)
(retest)
(refresh)
(init)
(retest)
(ask 5)
(retest)
(ask 5)
(. *e printStackTrace)
(retest)
(stop)
(refresh)
(init)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(. *e printStackTrace)
(retest)
(refresh)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(ask 5)
search "How long"
(search "How long"
);
(ask 131)
(. *e printStackTrace)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(ask 5)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(ask 131)
(retest)
(ask 5)
(retest)
(ask 5)
(ask 131)
(timeout)
(retest)
(ask 5)
(ask 131)
(retest)
(search "What brings you in")
(ask 1)
(retest)
(ask 1)
(retest)
(ask 1)
(ask 131)
(retest)
(epos 1001)
(ask 1)
(retest)
(refresh)
(retest)
(refresh)
(retest)
(ask 1)
(retest)
(epos 1001)
(ask 1)
(ask 131)
(search "drugs")
(ask 45)
(ask 56)
(timeout)
(clojure.main/repl :print pprint)
(retest)
(refresh)
(retest)
(ask 1)
(retest)
(ask 1)
(retest)
(ask 1)
(search "how long")
(ask 131)
(retest)
(ask 1)
(ask 131)
(retest)
(ask 1)
(retest)
(ask 1)
(retest)
(ask 131)
(retest)
(ask 1)
(retest)
(ask 1)
(ask 131)
(retest)
(ask 1)
(ask 131)
(search "How")
(ask 4)
(ask 131)
(retest)
(refresh)
(retest)
(ask 4)
(ask 131)
(ask 1)
(ask 131)
(ask 1)
(ask 7)
(ask 131)
(ask 200)
(ask 100)
(ask 131)
(search "feel")
(search "sleep")
(ask 35)
(ask 36)
(retest)
(ask 36)
(search "sleep")
(ask 35)
(rand-nth nil)
(rand-nth [])
(rand-nth (seq []))
(retest)
(reset)
exit
(retest)
(ask 1)
(ask 2)
(ask 3)
(timeout)
(retest)
(ask 1)
(retest)
(ask 1)
(retest)
(ask 1)
(retest)
(refresh)
(retest)
(ask 1)
(retest)
(ask 1)
(timeout)
(retest)
(ask 1)
(timeout)
(retest)
(ask 1)
(continuation)
(retest)
(refresh)
(retest)
(ask 1)
(continuation)
(retest)
(ask 1)
(continuation)
(retest)
(ask 1)
(retest)
(ask 1)
(continuation)
(retest)
(ask 1)
(continuation)
(retest)
(ask 1)
(continuation)
(retest)
(ask 1)
(search "how long")
(ask 130)
(retest)
(ask 1)
(ask 130)
(search "how bad")
(ask 137)
(ask 144)
(search "suicide")
(ask 80)
(timeout)
(retest)
(ask 137)
(. *e printStackTrace)
(retest)
(ask 137)
(ask 8)
(ask 137)
(search "alcohol")
(ask 55)
(timeout)
(ask 55)
(retest)
(ask 55)
(question "How many")
(search "How many")
(ask 143)
(search "Suicide")
(ask 80)
(timeout)
(search "sex")
(ask 40)
(ask 126)
(search "drugs")
(ask 56)
(timeout)
(ask 1)
(timeout)
(search "feel")
(ask 68)
(retest)
(ask 1)
(retest)
(ask 1)
(ask 103)
(ask 99)
(ask 500)
(ask 130)
(retest)
(ask 1)
(ask 130)
(ask 131)
(ask 132)
(ask 133)
(ask 134)
(ask 135)
(ask 136)
(timeout)
(retest)
(ask 1)
(timeout)
(reset)
(refresh)
(reset)
(restest)
(refresh)
(retest)
(reset)
(retest)
(restart)
(refresh)
(restart)
(go)
(reset)
(refresh)
(reset)
(refresh)
(reset)
exit
(reset)
(stop)
(init)
(reset)
(refresh)
(reset)
(v/sync-videos system)
(. *e printStackTrace)
(reset)
(v/sync-videos system)
exit
(reset)
(v/sync-videos system)
(. *e printStackTrace)
system
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(. *e printStackTrace)
(reset)
(v/sync-videos system)
(. *e printStackTrace)
(reset)
(v/sync-videos system)
(. *e printStackTrace)
(-> *e .caue .printStackTrace)
(-> *e .getCause .printStackTrace)
(reset)
(v/sync-videos system)
exit
(reset)
(v/sync-videos system)
exit
(reset)
(v/sync-videos system)
(. *e printStackTrace)
exit
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
exit
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(v/sync-videos system)
(reset)
(search "how are you doing")
(. *e printStackTrace)
(reset)
(search "how are you doing")
(reset)
(search "how are you doing")
(search "drug")
(search "drugs")
exit
(reset)
(v/sync-videos)
(v/sync-videos system)
(reset)
(v/sync-videos system)
exit
(reset)
(require 'anyma.server.user :as u)
(require '[anyma.server.user :as u])
(go)
(u/register "dave@iradix.com" "password")
(u/insert-user! "dave@iradix.com" "password")
(reload)
(reset)
(refresh)
(reset)
(u/insert-user! "dave@iradix.com" "password")
(require '[anyma.server.user :as u])
(u/insert-user! "dave@iradix.com" "password")
(u/insert-user! (:db system) "dave@iradix.com" "password")
(u/name-available? "dave@iradix.com)
(u/name-available? (:db system) "dave@iradix.com")
(u/name-available? (:db system) "dave@iradix.comd")
(u/authenticate (:db system) "dave@iradix.com" "password")
(u/authenticate (:db system) "dave@iradix.com" "passwordo")
(reset)
(go)
(reset)
(go)
(reset)
(refresh)
(reset)
(refresh)
(reset)
(refresh)
(reset)
(go)
(reset)
exit
(go)
(reset)
(go)
anyma/migrate
(anyma/migrate)
(reset)
(refresh)
(reset)
eixt
exit
(go)
exit
(go)
exit
(go)
exit
(go)
(reset)
exit
(go)
(reset)
(stop)
exit
